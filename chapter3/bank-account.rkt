#lang racket

(define balance 100)

(define (withdraw amount)
    (if (> balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))

(define new-withdraw
    (let ((balance 100))
      (lambda (amount)
        (if (> balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))))

(define (make-withdraw balance)
    (lambda (amount)
      (if (> balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define (make-account balance password)
    (define failed-times 0)
    (define (call-the-cops . args) "Calling the cops!")
    (define (withdraw amount)
        (if (> balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
        (begin (set! balance (+ balance amount))
               balance))
    (define (dispatch p m)
        (cond ((not (eq? p password))
               (begin (set! failed-times (+ failed-times 1))
                      (if (< failed-times 7)
                        (lambda (x) "Incorrect password")
                        call-the-cops)))
              ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT" m))))
    dispatch)

(module+
  main
  (withdraw 25)
  (withdraw 25)
  (withdraw 60)
  (withdraw 15)
  (define W1 (make-withdraw 100))
  (define W2 (make-withdraw 100))
  (W1 50)
  (W2 70)
  (W2 40)
  (W1 40)
  (define acc (make-account 100 '1234))
  ((acc '1234 'withdraw) 50)
  ((acc '1234 'withdraw) 60)
  ((acc '1234 'deposit) 40)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  ((acc '4321 'withdraw) 60)
  )
